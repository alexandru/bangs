import org.jetbrains.kotlin.gradle.targets.js.webpack.KotlinWebpackConfig

plugins {
    alias(libs.plugins.kotlinMultiplatform) 
}

group = "org.alexn.bangs"
version = "1.0-SNAPSHOT"

repositories {
    mavenCentral()
}

kotlin {
    js(IR) {
        binaries.executable()
        browser {
            outputModuleName = "bangs"

            commonWebpackConfig {
                devServer = (devServer ?: KotlinWebpackConfig.DevServer()).apply {
                    static = (static ?: mutableListOf()).apply {
                        add(project.rootDir.path)
                    }
                }
                cssSupport {
                    enabled.set(false)
                }
            }

            testTask {
                useKarma {
                    useChromeHeadless()
                }
            }
        }
    }

    sourceSets {
        val jsMain by getting {
            dependencies {
                implementation(kotlin("stdlib-js"))
            }
        }
        val jsTest by getting {
            dependencies {
                implementation(kotlin("test-js"))
            }
        }
    }
}

tasks.register("generateGitCommitSha") {
    doLast {
        val generatedDir = File(project.layout.projectDirectory.asFile, "src/jsMain/kotlin/generated")
        val outputFile = File(generatedDir, "build-info.kt")
        val tempFile = File(temporaryDir, "git-sha.txt")

        if (!generatedDir.exists()) {
            generatedDir.mkdirs()
        }

        // Execute git command and capture output to a temporary file
        exec {
            commandLine("git", "rev-parse", "HEAD")
            standardOutput = tempFile.outputStream()
        }

        // Read from temp file and write to the actual output file
        val commitSha = tempFile.readText().trim().take(7)
        outputFile.writeText(
            """
            package generated
            
            // -------------------------------------------------------------------
            // This file is auto-generated by the `generateBuildInfo` Gradle task.
            // Do not modify it manually!
            // -------------------------------------------------------------------
            
            const val BUILD_GIT_COMMIT_SHA = "$commitSha"
            
            """.trimIndent(), Charsets.UTF_8)
    }
}

// Make all compile tasks depend on generateGitCommitSha
tasks.withType<org.jetbrains.kotlin.gradle.tasks.KotlinCompile> {
    dependsOn("generateGitCommitSha")
}

// Make all compile tasks for JS depend on generateGitCommitSha
tasks.withType<org.jetbrains.kotlin.gradle.tasks.Kotlin2JsCompile> {
    dependsOn("generateGitCommitSha")
}

// Add generated directory to clean task
tasks.named("clean") {
    doLast {
        delete(File(project.layout.projectDirectory.asFile, "src/jsMain/kotlin/generated"))
    }
}
